
#include "contiki.h"
#include "lib/random.h"
#include "sys/ctimer.h"
#include "sys/etimer.h"
#include "net/ip/uip.h"
#include "net/ipv6/uip-ds6.h"
#include "net/ip/uip-debug.h"
#include "net/rpl/rpl.h"

#include "simple-udp.h"

#include <stdio.h>
#include <string.h>

#define UDP_PORT 1234

#define SEND_INTERVAL		(60 * CLOCK_SECOND)
#define SEND_TIME		(random_rand() % (SEND_INTERVAL))

static struct simple_udp_connection unicast_connection;

// George: if they are equal, the message was not lost
static int seq_id;
static int reply;
// George RTT
static unsigned int message_number;
static uint32_t sent_time=0;
static uint32_t rttime; //this will be printed
uint8_t msg_data; // the message sent/received 
uint32_t timeDIf =0; //RTT time: some times it could go out of bounds (reset)
/*---------------------------------------------------------------------------*/
PROCESS(sender_node_process, "Sender node process");
AUTOSTART_PROCESSES(&sender_node_process);
/*---------------------------------------------------------------------------*/

static void
set_global_address(void)
{
  uip_ipaddr_t ipaddr;
  int i;
  uint8_t state;

  uip_ip6addr(&ipaddr, UIP_DS6_DEFAULT_PREFIX, 0, 0, 0, 0, 0, 0, 0);
  uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);

  printf("IPv6 addresses: ");
  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    state = uip_ds6_if.addr_list[i].state;
    if(uip_ds6_if.addr_list[i].isused &&
       (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
      uip_debug_ipaddr_print(&uip_ds6_if.addr_list[i].ipaddr);
      printf("\n");
    }
  }
}
/*---------------------------------------------------------------------------*/


static void
receiver(struct simple_udp_connection *c,
         const uip_ipaddr_t *sender_addr,
         uint16_t sender_port,
         const uip_ipaddr_t *receiver_addr,
         uint16_t receiver_port,
         const uint8_t *data,
         uint16_t datalen)
{
	//get the message number out of the data
	char num[5];
	num[0]=data[8];
	num[1]='\0'; 

   printf("Current DATA sent message_number %d\n",message_number);


	timeDIf = RTIMER_NOW()-sent_time;
	if (timeDIf < 100000){ //if rtime resets, the number is >>
		//printf("RPL: RTT: %lu\n",timeDIf);
		rttime = timeDIf;
	}
	
	uint8_t msgNum = atoi(num); //convert to int
	printf("Sender received DATA: Message %d, w timeDif: %d\n",
         msgNum,timeDIf);
}
/*---------------------------------------------------------------------------*/


PROCESS_THREAD(sender_node_process, ev, data)
{
  static struct etimer periodic_timer;
  static struct etimer send_timer;
  //variable to be in the same printing round for each node
  static int counter=0;
  uip_ipaddr_t addr;
  
  PROCESS_BEGIN();

  set_global_address();


/***************** Create the UDP connection **********************/
  simple_udp_register(&unicast_connection, UDP_PORT,
                      NULL, UDP_PORT, receiver);
/*****************************************************************/


   // 60*CLOCK_SECOND should print for RM090 every one (1)  min
  etimer_set(&periodic_timer, 60*CLOCK_SECOND);
  while(1) {
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&periodic_timer));
    etimer_reset(&periodic_timer);

    //uip_ip6addr(&addr, UIP_DS6_DEFAULT_PREFIX, 0, 0, 0, 0x0201, 0x001, 0x001, 0x001);


	 // Decide the last digit which node to send to.....
    uip_ip6addr(&addr, UIP_DS6_DEFAULT_PREFIX, 0, 0, 0, 0xc30c, 0x000, 0x000, 0x002);
    
    {
      char buf[20];

      printf("Sending unicast DATA to ");
      uip_debug_ipaddr_print(&addr);
      printf("\n");
      sprintf(buf, "Message %d", message_number);
      msg_data = buf;
      
      message_number++;
      
      seq_id++;
      sent_time = RTIMER_NOW(); //time the message was sent...
      
/************ BASIC SENDING MECHANISM **********************************/
      simple_udp_sendto(&unicast_connection, buf, strlen(buf) + 1, &addr);
/***********************************************************************/
    
    }
    
    //printf("R:%d, Leaf MODE: %d\n",counter,rpl_get_mode());
	 if(counter%11 == 0){
		printf("R:%d, Node COLOR: %d\n",counter,node_color);
	 }
	 
    counter++; //new round of stats
  }

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
